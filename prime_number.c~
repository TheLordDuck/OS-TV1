#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <pthread.h>
#include <stdbool.h>

struct arg_struct{
  int id;
  int start;
  int end;
} *args;

bool isPrimeNumber(int n){
  int flag=0;
  for(int i = 2; i <= n / 2; i++){
    if(n % i == 0){
      flag = 1;
      break;
    }
  }

  if(flag==0){
    return true;
  } else {
    return false;
  }
}

void* calculatePrime(void *arguments){
  struct arg_struct *args = arguments;
  int id=args->id;
  int start=args->start;
  int end=args->end;
  for(int i = start; i <= end; i++){
    if(isPrimeNumber(i)){
      printf("Thread with id (%d) has found a prime number (%d).\n", id, i);
    }
  }
  return 0;
}

int main()
{
  args = malloc(sizeof(struct arg_struct) * 1);
  //pthread_t th[2];
  pthread_t t1,t2;
  //1
  args->id=1;
  args->start=1;
  args->end=10;
  if(pthread_create(&t1, NULL, &calculatePrime, args) != 0){
    perror("Failed to create thread.\n");
  }
  //2
  args->id=2;
  args->start=11;
  args->end=20;
  if(pthread_create(&t2, NULL, &calculatePrime, args) != 0){
    perror("Failed to create thread.\n");
  }
  //thread joins
  pthread_join(t1, NULL);
  pthread_join(t2, NULL);
  return 0;
}
